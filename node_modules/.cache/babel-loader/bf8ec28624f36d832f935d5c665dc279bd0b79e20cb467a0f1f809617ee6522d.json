{"ast":null,"code":"import { signInWithEmailAndPassword } from 'firebase/auth';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { db, auth } from '../../firebase';\nconst AuthModule = {\n  state: {\n    food: '',\n    post: '',\n    email: '',\n    password: '',\n    userId: '',\n    isLogIn: false,\n    user: null\n  },\n  mutations: {\n    setFood(state, value) {\n      state.food = value;\n    },\n    setLogIn(state) {\n      state.isLogIn = true;\n    },\n    setUser(state, user) {\n      state.user = user;\n    }\n  },\n  actions: {\n    async signIn({\n      commit\n    }, {\n      email,\n      password\n    }) {\n      try {\n        await signInWithEmailAndPassword(auth, email, password);\n        const user = auth.currentUser.uid;\n        commit('setUser', user);\n        commit('setLogIn');\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    postFood({\n      state,\n      commit\n    }) {\n      const post = {\n        food: state.food,\n        userId: state.userId,\n        timestamp: new Date().getTime()\n      };\n      addDoc(collection(db, 'posts'), post).then(() => {\n        console.log('Post added successfully');\n        // reset the food input field\n        this.food = '';\n        // update the food state in Vuex\n        this.$store.dispatch('setFood', '');\n      }).catch(error => {\n        console.error('Error adding post: ', error);\n      });\n    }\n  },\n  getters: {\n    food: state => state.food,\n    post: state => state.post,\n    email: state => state.email,\n    password: state => state.password,\n    isLogIn: state => state.isLogIn\n  }\n};\nexport default AuthModule;","map":{"version":3,"names":["signInWithEmailAndPassword","collection","addDoc","db","auth","AuthModule","state","food","post","email","password","userId","isLogIn","user","mutations","setFood","value","setLogIn","setUser","actions","signIn","commit","currentUser","uid","error","console","log","postFood","timestamp","Date","getTime","then","$store","dispatch","catch","getters"],"sources":["C:/Users/Ball/OneDrive/Documents/Web dev/own-website/src/Store/auth/index.js"],"sourcesContent":["import {\r\n    signInWithEmailAndPassword\r\n} from 'firebase/auth';\r\nimport { collection, addDoc } from 'firebase/firestore';\r\nimport { db, auth } from '../../firebase';\r\n\r\nconst AuthModule = {\r\n    state:{ \r\n        food:'',\r\n        post:'',\r\n        email:'',\r\n        password:'',\r\n        userId:'',\r\n        isLogIn: false,\r\n        user: null\r\n    },\r\n    mutations:{\r\n        setFood(state,value){\r\n            state.food = value\r\n        },\r\n        setLogIn(state){\r\n            state.isLogIn = true;\r\n        },\r\n        setUser(state,user){\r\n            state.user = user\r\n        }\r\n    },\r\n    actions:{\r\n        async signIn({ commit }, { email, password}){\r\n            try {\r\n                await signInWithEmailAndPassword(auth, email, password);\r\n                const user = auth.currentUser.uid\r\n                commit('setUser', user)\r\n                commit('setLogIn')\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        },\r\n        postFood({ state, commit}) {\r\n            const post = {\r\n              food: state.food,\r\n              userId: state.userId,\r\n              timestamp: new Date().getTime()\r\n            };\r\n            addDoc(collection(db, 'posts'), post)\r\n              .then(() => {\r\n                console.log('Post added successfully');\r\n                // reset the food input field\r\n                this.food = '';\r\n                // update the food state in Vuex\r\n                this.$store.dispatch('setFood', '');\r\n              })\r\n              .catch((error) => {\r\n                console.error('Error adding post: ', error);\r\n              });\r\n          }\r\n    },\r\n    getters:{\r\n        food: (state) => state.food,\r\n        post: (state) => state.post,\r\n        email: (state )=> state.email,\r\n        password: (state) => state.password,\r\n        isLogIn: (state)=> state.isLogIn\r\n    }\r\n}\r\n\r\nexport default AuthModule;"],"mappings":"AAAA,SACIA,0BAA0B,QACvB,eAAe;AACtB,SAASC,UAAU,EAAEC,MAAM,QAAQ,oBAAoB;AACvD,SAASC,EAAE,EAAEC,IAAI,QAAQ,gBAAgB;AAEzC,MAAMC,UAAU,GAAG;EACfC,KAAK,EAAC;IACFC,IAAI,EAAC,EAAE;IACPC,IAAI,EAAC,EAAE;IACPC,KAAK,EAAC,EAAE;IACRC,QAAQ,EAAC,EAAE;IACXC,MAAM,EAAC,EAAE;IACTC,OAAO,EAAE,KAAK;IACdC,IAAI,EAAE;EACV,CAAC;EACDC,SAAS,EAAC;IACNC,OAAOA,CAACT,KAAK,EAACU,KAAK,EAAC;MAChBV,KAAK,CAACC,IAAI,GAAGS,KAAK;IACtB,CAAC;IACDC,QAAQA,CAACX,KAAK,EAAC;MACXA,KAAK,CAACM,OAAO,GAAG,IAAI;IACxB,CAAC;IACDM,OAAOA,CAACZ,KAAK,EAACO,IAAI,EAAC;MACfP,KAAK,CAACO,IAAI,GAAGA,IAAI;IACrB;EACJ,CAAC;EACDM,OAAO,EAAC;IACJ,MAAMC,MAAMA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAAEZ,KAAK;MAAEC;IAAQ,CAAC,EAAC;MACxC,IAAI;QACA,MAAMV,0BAA0B,CAACI,IAAI,EAAEK,KAAK,EAAEC,QAAQ,CAAC;QACvD,MAAMG,IAAI,GAAGT,IAAI,CAACkB,WAAW,CAACC,GAAG;QACjCF,MAAM,CAAC,SAAS,EAAER,IAAI,CAAC;QACvBQ,MAAM,CAAC,UAAU,CAAC;MACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACtB;IACJ,CAAC;IACDG,QAAQA,CAAC;MAAErB,KAAK;MAAEe;IAAM,CAAC,EAAE;MACvB,MAAMb,IAAI,GAAG;QACXD,IAAI,EAAED,KAAK,CAACC,IAAI;QAChBI,MAAM,EAAEL,KAAK,CAACK,MAAM;QACpBiB,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,OAAO;MAC/B,CAAC;MACD5B,MAAM,CAACD,UAAU,CAACE,EAAE,EAAE,OAAO,CAAC,EAAEK,IAAI,CAAC,CAClCuB,IAAI,CAAC,MAAM;QACVN,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC;QACA,IAAI,CAACnB,IAAI,GAAG,EAAE;QACd;QACA,IAAI,CAACyB,MAAM,CAACC,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC;MACrC,CAAC,CAAC,CACDC,KAAK,CAAEV,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,CAAC;IACN;EACN,CAAC;EACDW,OAAO,EAAC;IACJ5B,IAAI,EAAGD,KAAK,IAAKA,KAAK,CAACC,IAAI;IAC3BC,IAAI,EAAGF,KAAK,IAAKA,KAAK,CAACE,IAAI;IAC3BC,KAAK,EAAGH,KAAK,IAAKA,KAAK,CAACG,KAAK;IAC7BC,QAAQ,EAAGJ,KAAK,IAAKA,KAAK,CAACI,QAAQ;IACnCE,OAAO,EAAGN,KAAK,IAAIA,KAAK,CAACM;EAC7B;AACJ,CAAC;AAED,eAAeP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}